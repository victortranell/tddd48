Report Lab6

%%%%%%%%%%%%%%%%%%%
Environment 1: Maze, robot: hook_planar_robot.dae
Environment 2: Barriers, robot: barriers_easy_robot.dae

Planner 1: PRM
This is a probibalistic planner that randomizes states along the availible state space. Creates roadmaps around milestones which leads to a high granularity map along obstacles.

Observations:
Since it explores around obstacles the ppath will be very good around them. However, not all obstacles must be avoided since they are not along the best paths and therefore PRM does not compute the best paths and is generally pretty slow.

%%%%%%%%%%%%%%%%%%%

Planner 2: RRTConnect
RRTConnect uses two RRT searches, one from the start position and one from the goal and tries to connect them. An RRT search is performed by randomly placing state on the map and then connects it to the closest state already explored until the goal state is found. 

Observations:
This is generally very quick and finds good solutions. This is due to the fact that it starts both from the goal and start state and only expands states that are closer to the current node than any previously explored state.

Planner 3: SPARStwo
Places randomly uniformly distributed states among the entire search space and tries to connect it between each other to generate a roadmap. Since it doesn't consider distance between the connected states it is not very reliable in finding good paths. Since the points are so sparsly distributed it only considers a small amount of states.
----------
Env1.
This is very similar to the PRM in the same environment since the PRM expands around obstacles and the whole map consist of obstacles and therefore sparstwo and PRM has similarly sized search spaces. However it is far from optimal.

----------
Env2.
Since this map is very big the availible search space is huge which leads to it taking a long time as sparsetwo selects randomly over the whole map. However it is far from optimal.

----------
