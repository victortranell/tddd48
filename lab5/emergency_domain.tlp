; Variable abbreviations:
; c - carrier
; l - location
; t - resource type
; u - uav
; d - depot

(clear-world-symbols)			;Remove old domain symbols

(declare-described-symbols
	;typing 
	(predicate uav 1)
	(predicate depot 1)
	(predicate location 1)
	(predicate type 1)
	(predicate carrier 1)

	;predicates
	(predicate loc 2)
	(predicate empty 1)
	(predicate carrying 2)

	;functions
	(function boxcount 2)
	(function used 1)
	(function unused 1)
	(function cratesUndelivered 2)
)

(set-tl-control 
 	(always 
	 	(and 
			
			;---------------------------
			;Add more control rules here
			;---------------------------

			;-----
			;DON'Ts
			;-----

			;If there is a carrier with items at a location where they are needed
			;don't pick up item with another uav located at another location
			(forall (?c) (carrier ?c) (?u) (uav ?u) (?l) (location ?l)
				(implies
					(and
						(empty ?u)
						(not (loc ?u ?l))
						(exists (?u2) (uav ?u2) (?t2) (type ?t2)
							(and
								(> (boxcount ?c ?t2) 0)
								(> (cratesUndelivered ?t2 ?l) 0)
								(loc ?u2 ?l)
								(loc ?c ?l)
							)
						)
					)
					(next
						(empty ?u)
					)
				)
			)

			;If carrier carrying items in a location where it is needed, unload.
			(forall (?c) (carrier ?c) (?u) (uav ?u) (?l) (location ?l) (?t) (type ?t)
				(implies
					(and
						(empty ?u)
						(> (boxcount ?c ?t) 0)
						(> (cratesUndelivered ?t ?l) 0)
						(loc ?u ?l)
						(loc ?c ?l)
					)
					(next
						(and
							(not (empty ?u))
							(forall (?c1) (carrier ?c1) (not (carrying ?u ?c1)))
						)
					)
				)
			)

			; Only pickup a type if there is some place to deliver it
			(forall (?u) (uav ?u) (?t) (type ?t)
			 	(implies 
			 		(not (exists (?x) (location ?x) (not (= (cratesUndelivered ?t ?x) 0))))
					(next 
						(not (carrying ?u ?t))
					)
				)
			)


			;Don't fly to a location with a uav if the demand is >1
			(forall (?u) (uav ?u) (?l) (location ?l) (?t) (type ?t)
				(implies
					(and
						(carrying ?u ?t)
						(> (cratesUndelivered ?t ?l) 1)
						(not (loc ?u ?l))
					)
					(next
						(not (loc ?u ?l))
					)
				)
			)

			;If carrier at depot fills need -> don't pick up another crate
			(forall (?u) (uav ?u) (?t) (type ?t) (?c) (carrier ?c) (?l) (location ?l)
				(implies
					(and
						(empty ?u)
						(loc ?u ?l)
						(loc ?c ?l)
						(exists (?d) (depot ?d) (loc ?d ?l))
						(exists (?l2) (location ?l2)
							(exists (?t2) (type ?t2)
								(and
									(> (cratesUndelivered ?t2 ?l2) 1)
									(= (boxcount ?c ?t2) (cratesUndelivered ?t2 ?l2))
								)
							)
						)
					)
					(next
						(not (carrying ?u ?t))
					)
				)
			)

			
			;Don't fly empty carrier to other location than depot
			(forall (?u) (uav ?u) (?c) (carrier ?c) (?l) (location ?l)
				(implies
					(and
						(not (loc ?u ?l))
						(= (used ?c) 0)
						(carrying ?u ?c)
						(not (exists (?d) (depot ?d) (loc ?d ?l)))
					)
					(next
						(not (loc ?u ?l))
					)
				)
			)

			;Don't pick up empty carriers if positioned at depot
			(forall (?u) (uav ?u) (?c) (carrier ?c) (?l) (location ?l)
				(implies
					(and
						(= (used ?c) 0)
						(loc ?c ?l)
						(exists (?d) (depot ?d) (loc ?d ?l))
					)
					(next
						(not (carrying ?u ?c))
					)
				)
			)


;			;Don't pick up item if another uav is holding some item
			(forall (?u) (uav ?u)
				(implies
					(and
						(empty ?u)
						(exists (?u2) (uav ?u2)
							(not (empty ?u2))
						)
					)
					(next
						(empty ?u)
					)
				)
			)


			;Don't pick up carrier if already carried by other uav
			(forall (?u) (uav ?u) (?c) (carrier ?c) (?t) (type ?t)
				(implies
					(and
						(not (carrying ?u ?c))
						(exists (?u2) (uav ?u2)
							(carrying ?u2 ?c)
						)
					)
					(next
						(not (carrying ?u ?c))
					)
				)
			)

			;Don't fly uav carrying carrier with items to a location that requires
			;more than we carry
			(forall (?u) (uav ?u) (?c) (carrier ?c) (?l) (location ?l)
				(implies
					; Carrier carrying item
					(and 
						(not (loc ?u ?l))
						(carrying ?u ?c)
						(exists (?t) (type ?t)
							(and
								(> (boxcount ?c ?t) 0)
								(< (cratesUndelivered ?t ?l) (boxcount ?c ?t))
							)
						)
					)
					(next
						(not (loc ?u ?l))
					)
				)
			)

			;Don't fly uav carrying item to location that doesn't require that
			;item
			(forall (?u) (uav ?u) (?c) (carrier ?c) (?l) (location ?l)
				(implies
					(and 
						(not (loc ?u ?l))
						(exists (?t) (type ?t)
							(and
								(carrying ?u ?t)
								(= (cratesUndelivered ?t ?l) 0)
							)
						)
					)
					(next
						(not (loc ?u ?l))
					)
				)
			)

			;Don't fly empty uav to a location that is not depot
			(forall (?u) (uav ?u) (?c) (carrier ?c) (?l) (location ?l)
				(implies
					(and 
						(not (loc ?u ?l))
						(empty ?u)
						(not (exists (?d) (depot ?d) (loc ?d ?l)))
					)
					(next
						(not (loc ?u ?l))
					)
				)
			)
		)
	)
)					


; Crates are picked up from the depot via this operator.
(def-adl-operator (pick-up-crate ?u ?l ?d ?t)
	(pre 
		(?u) (uav ?u)
		(?d) (depot ?d)
		(?l) (location ?l)
		(?t) (type ?t)
		
		(and 	(loc ?d ?l)
				(loc ?u ?l)
				(empty ?u)))
	
	(add	(carrying ?u ?t))
	
	(del 	(empty ?u))
)		

;Deliver a crate to a location where it is needed
(def-adl-operator (put-down-crate ?u ?l ?t)
	(pre 
		(?u) (uav ?u)
		(?l) (location ?l)
		(?t) (type ?t)
		
		(and 	(loc ?u ?l)
				(carrying ?u ?t)
				(not (= (cratesUndelivered ?t ?l) 0))))
	
	(add	(-= (cratesUndelivered ?t ?l) 1)
			(empty ?u))
	
	(del 	(carrying ?u ?t))
)		

;An empty UAV can picks up a carrier 
(def-adl-operator (pick-up-carrier ?u ?c ?l)
	(pre 
		(?u) (uav ?u)
		(?c) (carrier ?c)
		(?l) (location ?l)
		
		(and 	(loc ?c ?l)
				(loc ?u ?l)
				(empty ?u)))
	
	(add	(carrying ?u ?c))
	
	(del 	(empty ?u) (loc ?c ?l))
)

;A UAV holding a carrier can put it down
(def-adl-operator (put-down-carrier ?u ?c ?l)
	(pre 
		(?u) (uav ?u)
		(?c) (carrier ?c)
		(?l) (location ?l)
		
		(and 	(carrying ?u ?c)
				(loc ?u ?l)))
	
	(add	(loc ?c ?l)
			(empty ?u))
	
	(del 	(carrying ?u ?c))
)
          
;A UAV holding a crate can put it on a carrier
(def-adl-operator (load-carrier ?u ?c ?l ?t)
	(pre
		(?u) (uav ?u)
		(?c) (carrier ?c)
		(?l) (location ?l)
		(?t) (type ?t)

		(and  	(not (= (unused ?c) 0))
				(loc ?c ?l)
				(loc ?u ?l)
				(carrying ?u ?t)))
	(add
			(+= (used ?c) 1)
        	(-= (unused ?c) 1)
            (+= (boxcount ?c ?t) 1)
			(empty ?u))
			
	(del 
			(carrying ?u ?t))
)

;Pick a crate from a carrier
(def-adl-operator (unload-carrier ?u ?c ?l ?t)
	(pre
		(?u) (uav ?u)
		(?c) (carrier ?c)
		(?l) (location ?l)
		(?t) (type ?t)

		(and  	(empty ?u)
				(loc ?c ?l)
				(loc ?u ?l)
				(not (= (boxcount ?c ?t) 0))))
	(add
			(-= (used ?c) 1)
        	(+= (unused ?c) 1)
            (-= (boxcount ?c ?t) 1)
			(carrying ?u ?t))
			
	(del 
			(empty ?u))
)

; Fly a UAV 
(def-adl-operator (fly-to ?u ?from ?to)
	(pre
		(?u)    (uav ?u)
		(?from) (location ?from)
		(?to)   (location ?to)

		(and  	(loc ?u ?from)))

	(add	(loc ?u ?to))			
			
	(del 	(loc ?u ?from))
)
